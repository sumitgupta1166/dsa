//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
class Solution
{
public:
    int largestIsland(vector<vector<int>>& grid) {
    int n = grid.size();
    if (n == 0) return 0;
    
    int maxSize = 0;
    int color = 2;
    unordered_map<int, int> islandSizes;

    vector<int> dx = {1, -1, 0, 0};
    vector<int> dy = {0, 0, 1, -1};

    function<int(int, int)> dfs = [&](int i, int j) {
        if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] != 1) return 0;

        grid[i][j] = color; // Mark as visited
        int size = 1;
        for (int k = 0; k < 4; k++) {
            int x = i + dx[k];
            int y = j + dy[k];
            size += dfs(x, y);
        }
        return size;
    };

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 1) {
                int size = dfs(i, j);
                islandSizes[color] = size;
                maxSize = max(maxSize, size);
                color++;
            }
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 0) {
                unordered_set<int> neighborColors;
                int currentSize = 1;

                for (int k = 0; k < 4; k++) {
                    int x = i + dx[k];
                    int y = j + dy[k];
                    if (x >= 0 && x < n && y >= 0 && y < n && grid[x][y] >= 2) {
                        neighborColors.insert(grid[x][y]);
                    }
                }

                for (int color : neighborColors) {
                    currentSize += islandSizes[color];
                }

                maxSize = max(maxSize, currentSize);
            }
        }
    }

    return maxSize == 0 ? n * n : maxSize;
}
};

//{ Driver Code Starts.

int main(){
    int t;
    cin >> t;
    while(t--){

        int n;
        cin>>n;
        vector<vector<int>>grid(n,vector<int>(n));
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                cin>>grid[i][j];
        Solution ob;
        cout<<ob.largestIsland(grid)<<endl;
    }
    return 0;
}

// } Driver Code Ends
