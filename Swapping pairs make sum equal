//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {

  public:
    int findSwapValues(int a[], int n, int b[], int m) {
         int sum1 = 0, sum2 = 0;
        
        // Calculate the sums of both arrays
        for(int i = 0; i < n; i++) 
            sum1 += a[i];
        for(int i = 0; i < m; i++) 
            sum2 += b[i];
        
        // If the difference is not even, return -1
        if ((sum1 - sum2) % 2 != 0)
            return -1;
        
        // Calculate the target difference
        int target = (sum1 - sum2) / 2;
        
        // Use a set to store the elements of array 'a'
        unordered_set<int> setA(a, a + n);
        
        // Check for each element in array 'b' if there exists an element in array 'a' that can be swapped
        for (int i = 0; i < m; i++) {
            if (setA.count(b[i] + target)) {
                return 1;
            }
        }
        
        return -1;
        // Your code goes here
    }
};

//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        int a[n];
        int b[m];
        for (int i = 0; i < n; i++)
            cin >> a[i];
        for (int i = 0; i < m; i++)
            cin >> b[i];

        Solution ob;
        cout << ob.findSwapValues(a, n, b, m);
        cout << "\n";
    }
    return 0;
}

// } Driver Code Ends
